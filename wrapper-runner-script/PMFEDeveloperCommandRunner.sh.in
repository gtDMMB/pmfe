#!/bin/bash

#### PMFEDeveloperCommandRunner.sh.in
#### Author:  Maxie D. Schmidt (github.com/maxieds)
#### Created: 2020.11.02

# Function used to print status messages using ANSI colored terminal output:
PMFEWrapperScriptPrint() {
        strMsg="$1"
        PMFEWrapperScriptHdr="\033[0m \033[0;35m[PMFE-WRAPPER-SCRIPT]\033[0m"
        echo -ne "${PMFEWrapperScriptHdr} ${strMsg}" 1>&2
}

# Function to print environment variable names using ANSI colored terminal output:
GetVarNameString() {
        echo -ne "\033[0;33m\$${1}\033[0m"
}

# Function to print the full usage of the script on error:
PMFEWrapperScriptUsage() {
        PMFEWrapperScriptPrint "SCRIPT USAGE: $1 <pmfe-sage|pmfe-findmfe|pmfe-parametrizer|pmfe-scorer|pmfe-subopt||make-pmfe-source> [ARGS]\n"
        PMFEWrapperScriptPrint "RECOGNIZED ENV SETTINGS (run \`export VARNAME=\"value\"\` to set these options): \n"
        PMFEWrapperScriptPrint "    -> "$(GetVarNameString "PMFE_DEBUG")":     Specifies whether to run the selected binary with gdb to view extra logs\n"
        PMFEWrapperScriptPrint "                        (set to \"1\" or \"true\" to enable)\n"
        exit -1
}

# Set some defaults:
# 1) The default working directory we will reset to in the PMFE source folder; and
# 2) The location of the pre-compiled PMFE binaries.
SCRIPT_DIR_PATH=`echo "$(readlink -f ${0})" | sed -e 's/\(.*\)\/\(.*\)\.sh$/\1/'`
DEFAULT_PMFE_EXE_PATH=$(readlink -f PMFE_BUILD_ABS_BINARY_DIR_PATH
CMAKE_EXE_PATH=$(readlink -f $DEFAULT_PMFE_EXE_PATH/../cmake-*/bin/cmake)

#export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$(readlink -f $SCRIPT_DIR_PATH/GTDMMBSoftware2020/BoostLocalInstall/lib)
#export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:$(readlink -f $SCRIPT_DIR_PATH/GTDMMBSoftware2020/gmp-6.2.0)

# Enable the option to run the PMFE binary selected by the user using a `gdb` debugger instance if
# `export PMFE_DEBUG=1` has been run. Primarily useful for debugging and development:
debugCmdPrefix=""
pmfeDebuggingOptions=$(env | grep PMFE_DEBUG | sed -e 's/PMFE_DEBUG=//g')
if [[ "$pmfeDebuggingOptions" == "1" || "$pmfeDebuggingOptions" == "true" ]]; then
        PMFEWrapperScriptPrint "Running with debugging options to view integrated boost::log library output ...\n"
        PMFEWrapperScriptPrint "Once the utilty has run, type 'q' then 'y' to exit, or continue to debug ...\n"
        debugCmdPrefix="gdb -ex run --args "
fi

# Run the specified binary and/or compute the specified action that the user passed as the
# first parameter to the script. Note:
# 1) "pmfe-tests" needs to be run with the current working directory set to the local PMFE source folder;
# 2) "pmfe-sage" sets up some special paths within Sage using the files in `DOT_SAGE` so the
#    PMFE Python library is found without any configuration by the user;
pmfeCmd=$1
pmfeCmdArgs="${@:2}"
validBinaryArg=0
case "${pmfeCmd}" in
        "pmfe-findmfe")      $debugCmdPrefix $DEFAULT_EXE_PATH/bin/$pmfeCmd $pmfeCmdArgs ;
                             validBinaryArg=1 ;
                             ;
        "pmfe-parametrizer") $debugCmdPrefix $DEFAULT_EXE_PATH/bin/$pmfeCmd $pmfeCmdArgs ;
                             validBinaryArg=1 ;
                             ;
        "pmfe-scorer")       $debugCmdPrefix $DEFAULT_EXE_PATH/bin/$pmfeCmd $pmfeCmdArgs ;
                             validBinaryArg=1 ;
                             ;
        "pmfe-subopt")       $debugCmdPrefix $DEFAULT_EXE_PATH/bin/$pmfeCmd $pmfeCmdArgs ;
                             validBinaryArg=1 ;
                             ;
        "pmfe-tests")        cd $DEFAULT_PMFE_EXE_PATH ;
                             $debugCmdPrefix $DEFAULT_EXE_PATH/bin/$pmfeCmd $pmfeCmdArgs ;
                             validBinaryArg=1 ;
                             ;
        "pmfe-sage")         PYTHONPATH=$PYTHONPATH DOT_SAGE=$DOT_SAGE sage ;
                             validBinaryArg=1 ;
                             ;
        "make-pmfe-source")  cd $DEFAULT_PMFE_EXE_PATH ;
                             $CMAKE_EXE_PATH --configure . ;
                             $CMAKE_EXE_PATH --build . ; 
                             make ;
                             find . -type d -exec chmod g+rwxs {} \+ ;
                             find . -type f -exec chmod g+rw {} \+ ;
                             find . -type f -perm /u+x -exec chmod g+x {} \+ ;
                             chgrp -R math-rnatope . ;
                             validBinaryArg=1 ;
                             ;
esac

# Exit printing usage on erroneous or invalid input:
if [[ "$validBinaryArg" != "1" ]]; then
        PMFEWrapperScriptPrint "ERROR: Invalid PMFE utility binary argument type specified!\n"
        PMFEWrapperScriptUsage $0
fi

exit 0
